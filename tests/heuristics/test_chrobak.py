from pytest import mark

from heuristics.chrobak import chrobak


def test_chrobak_cdabcdabceab_abceabcdabcd():
    expected_res = {'abcdabc': [(2, 4)], 
                    'ab': [(10, 0)], 
                    'c': [(0, 2)], 
                    'd': [(1, 11)], 
                    'e': [(9, 3)]}
    res = chrobak("cdabcdabceab", "abceabcdabcd")
    
    assert res == expected_res

@mark.parametrize(
    'S1,S2', [
        # grupo 1 - n = 113
        (
            '34431433244412241432221422333133411412412412412434222241332234331311124144111432313224141131223313212444442323313',
            '11431111312241224222342323243133341424113423432413431242234321214232414233413221234334331413141234241211444432114',
        ),
        # grupo 1 - n = 118
        (
            '2221141142244434333214433413313224212232232332123114142414432243333133123121413244413114314421412141341412233422144324',
            '3323411324212433142312124313313424244123221143222221114444232114241343424413213133432143331124142214342134343142342141',
        ),
        # grupo 1 - n = 115
        (
            '1122413112143312211242321434413221442342442342124423432443314124223132112233412143413324344131313413141334232414423',
            '1424443434433113113212422431242144413231344313422134341441321413421134112432132333241223242143413132242221142312342',
        ),
        # grupo 1 - n = 170
        (
            '43433432421314243312444123133131121124334232434224241442232413231114141214434243324122314342224131244121121434323312443411122223321431412422243111113243344321333313424112',
            '22323411434342221243224333334242434333113332134434314331342311424141414141443124422133111232442231124122423331221322332241121142113423241111321344434122244434214111414322',
        ),
    ]
)
def test_chrobak_solution_has_no_overlapping_and_no_missing_char(S1, S2):
    def fill(arr, i, j):
        for k in range(i, j):
            arr[k] += 1
    
    positions_of_S1 = [0]*len(S1)
    positions_of_S2 = [0]*len(S2)

    fsol = chrobak(S1, S2)

    for s in fsol:
        for i, j in fsol[s]:
            fill(positions_of_S1, i, i+len(s))
            fill(positions_of_S2, j, j+len(s))

    assert positions_of_S1 == positions_of_S2 == [1]*len(S1)
